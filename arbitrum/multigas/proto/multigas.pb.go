// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: arbitrum/multigas/proto/multigas.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MultiGasData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Computation   uint64                 `protobuf:"varint,1,opt,name=computation,proto3" json:"computation,omitempty"`
	HistoryGrowth uint64                 `protobuf:"varint,2,opt,name=history_growth,json=historyGrowth,proto3" json:"history_growth,omitempty"`
	StorageAccess uint64                 `protobuf:"varint,3,opt,name=storage_access,json=storageAccess,proto3" json:"storage_access,omitempty"`
	StorageGrowth uint64                 `protobuf:"varint,4,opt,name=storage_growth,json=storageGrowth,proto3" json:"storage_growth,omitempty"`
	Unknown       uint64                 `protobuf:"varint,5,opt,name=unknown,proto3" json:"unknown,omitempty"`
	TotalGas      uint64                 `protobuf:"varint,6,opt,name=total_gas,json=totalGas,proto3" json:"total_gas,omitempty"`
	Refund        uint64                 `protobuf:"varint,7,opt,name=refund,proto3" json:"refund,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MultiGasData) Reset() {
	*x = MultiGasData{}
	mi := &file_arbitrum_multigas_proto_multigas_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiGasData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiGasData) ProtoMessage() {}

func (x *MultiGasData) ProtoReflect() protoreflect.Message {
	mi := &file_arbitrum_multigas_proto_multigas_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiGasData.ProtoReflect.Descriptor instead.
func (*MultiGasData) Descriptor() ([]byte, []int) {
	return file_arbitrum_multigas_proto_multigas_proto_rawDescGZIP(), []int{0}
}

func (x *MultiGasData) GetComputation() uint64 {
	if x != nil {
		return x.Computation
	}
	return 0
}

func (x *MultiGasData) GetHistoryGrowth() uint64 {
	if x != nil {
		return x.HistoryGrowth
	}
	return 0
}

func (x *MultiGasData) GetStorageAccess() uint64 {
	if x != nil {
		return x.StorageAccess
	}
	return 0
}

func (x *MultiGasData) GetStorageGrowth() uint64 {
	if x != nil {
		return x.StorageGrowth
	}
	return 0
}

func (x *MultiGasData) GetUnknown() uint64 {
	if x != nil {
		return x.Unknown
	}
	return 0
}

func (x *MultiGasData) GetTotalGas() uint64 {
	if x != nil {
		return x.TotalGas
	}
	return 0
}

func (x *MultiGasData) GetRefund() uint64 {
	if x != nil {
		return x.Refund
	}
	return 0
}

type BlockMultiGasData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockNumber   uint64                 `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	BlockHash     string                 `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	GasData       *MultiGasData          `protobuf:"bytes,4,opt,name=gas_data,json=gasData,proto3" json:"gas_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockMultiGasData) Reset() {
	*x = BlockMultiGasData{}
	mi := &file_arbitrum_multigas_proto_multigas_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockMultiGasData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockMultiGasData) ProtoMessage() {}

func (x *BlockMultiGasData) ProtoReflect() protoreflect.Message {
	mi := &file_arbitrum_multigas_proto_multigas_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockMultiGasData.ProtoReflect.Descriptor instead.
func (*BlockMultiGasData) Descriptor() ([]byte, []int) {
	return file_arbitrum_multigas_proto_multigas_proto_rawDescGZIP(), []int{1}
}

func (x *BlockMultiGasData) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *BlockMultiGasData) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *BlockMultiGasData) GetGasData() *MultiGasData {
	if x != nil {
		return x.GasData
	}
	return nil
}

type BlockMultiGasBatch struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Data           []*BlockMultiGasData   `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	BatchTimestamp uint64                 `protobuf:"varint,2,opt,name=batch_timestamp,json=batchTimestamp,proto3" json:"batch_timestamp,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *BlockMultiGasBatch) Reset() {
	*x = BlockMultiGasBatch{}
	mi := &file_arbitrum_multigas_proto_multigas_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockMultiGasBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockMultiGasBatch) ProtoMessage() {}

func (x *BlockMultiGasBatch) ProtoReflect() protoreflect.Message {
	mi := &file_arbitrum_multigas_proto_multigas_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockMultiGasBatch.ProtoReflect.Descriptor instead.
func (*BlockMultiGasBatch) Descriptor() ([]byte, []int) {
	return file_arbitrum_multigas_proto_multigas_proto_rawDescGZIP(), []int{2}
}

func (x *BlockMultiGasBatch) GetData() []*BlockMultiGasData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *BlockMultiGasBatch) GetBatchTimestamp() uint64 {
	if x != nil {
		return x.BatchTimestamp
	}
	return 0
}

var File_arbitrum_multigas_proto_multigas_proto protoreflect.FileDescriptor

const file_arbitrum_multigas_proto_multigas_proto_rawDesc = "" +
	"\n" +
	"&arbitrum/multigas/proto/multigas.proto\x12\x0emultigas.proto\"\xf4\x01\n" +
	"\fMultiGasData\x12 \n" +
	"\vcomputation\x18\x01 \x01(\x04R\vcomputation\x12%\n" +
	"\x0ehistory_growth\x18\x02 \x01(\x04R\rhistoryGrowth\x12%\n" +
	"\x0estorage_access\x18\x03 \x01(\x04R\rstorageAccess\x12%\n" +
	"\x0estorage_growth\x18\x04 \x01(\x04R\rstorageGrowth\x12\x18\n" +
	"\aunknown\x18\x05 \x01(\x04R\aunknown\x12\x1b\n" +
	"\ttotal_gas\x18\x06 \x01(\x04R\btotalGas\x12\x16\n" +
	"\x06refund\x18\a \x01(\x04R\x06refund\"\x8e\x01\n" +
	"\x11BlockMultiGasData\x12!\n" +
	"\fblock_number\x18\x01 \x01(\x04R\vblockNumber\x12\x1d\n" +
	"\n" +
	"block_hash\x18\x02 \x01(\tR\tblockHash\x127\n" +
	"\bgas_data\x18\x04 \x01(\v2\x1c.multigas.proto.MultiGasDataR\agasData\"t\n" +
	"\x12BlockMultiGasBatch\x125\n" +
	"\x04data\x18\x01 \x03(\v2!.multigas.proto.BlockMultiGasDataR\x04data\x12'\n" +
	"\x0fbatch_timestamp\x18\x02 \x01(\x04R\x0ebatchTimestampB9Z7github.com/ethereum/go-ethereum/arbitrum/multigas/protob\x06proto3"

var (
	file_arbitrum_multigas_proto_multigas_proto_rawDescOnce sync.Once
	file_arbitrum_multigas_proto_multigas_proto_rawDescData []byte
)

func file_arbitrum_multigas_proto_multigas_proto_rawDescGZIP() []byte {
	file_arbitrum_multigas_proto_multigas_proto_rawDescOnce.Do(func() {
		file_arbitrum_multigas_proto_multigas_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_arbitrum_multigas_proto_multigas_proto_rawDesc), len(file_arbitrum_multigas_proto_multigas_proto_rawDesc)))
	})
	return file_arbitrum_multigas_proto_multigas_proto_rawDescData
}

var file_arbitrum_multigas_proto_multigas_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_arbitrum_multigas_proto_multigas_proto_goTypes = []any{
	(*MultiGasData)(nil),       // 0: multigas.proto.MultiGasData
	(*BlockMultiGasData)(nil),  // 1: multigas.proto.BlockMultiGasData
	(*BlockMultiGasBatch)(nil), // 2: multigas.proto.BlockMultiGasBatch
}
var file_arbitrum_multigas_proto_multigas_proto_depIdxs = []int32{
	0, // 0: multigas.proto.BlockMultiGasData.gas_data:type_name -> multigas.proto.MultiGasData
	1, // 1: multigas.proto.BlockMultiGasBatch.data:type_name -> multigas.proto.BlockMultiGasData
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_arbitrum_multigas_proto_multigas_proto_init() }
func file_arbitrum_multigas_proto_multigas_proto_init() {
	if File_arbitrum_multigas_proto_multigas_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_arbitrum_multigas_proto_multigas_proto_rawDesc), len(file_arbitrum_multigas_proto_multigas_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_arbitrum_multigas_proto_multigas_proto_goTypes,
		DependencyIndexes: file_arbitrum_multigas_proto_multigas_proto_depIdxs,
		MessageInfos:      file_arbitrum_multigas_proto_multigas_proto_msgTypes,
	}.Build()
	File_arbitrum_multigas_proto_multigas_proto = out.File
	file_arbitrum_multigas_proto_multigas_proto_goTypes = nil
	file_arbitrum_multigas_proto_multigas_proto_depIdxs = nil
}
